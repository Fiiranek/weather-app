{"version":3,"sources":["components/Error.js","components/Conditions.js","App.js","serviceWorker.js","index.js"],"names":["Error","Conditions","props","data","cod","className","name","sys","country","id","src","weather","icon","alt","string","description","charAt","toUpperCase","slice","Math","round","main","temp","type","placeholder","onChange","changeCityID","onClick","getData","App","useState","setData","cityID","setCityID","fetch","then","res","json","error","console","log","useEffect","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0PAEe,SAASA,IACpB,OACI,6BACI,iDCFG,SAASC,EAAWC,GAM/B,OACI,6BACoB,MAAnBA,EAAMC,KAAKC,IACR,yBAAKC,UAAU,cACnB,4BAAI,uBAAGA,UAAU,+BAAjB,IAAoDH,EAAMC,KAAKG,KAA/D,KAAuEJ,EAAMC,KAAKI,IAAIC,SACtF,yBAAKC,GAAG,cAAcC,IAAG,2CAAsCR,EAAMC,KAAKQ,QAAQ,GAAGC,KAA5D,WAA2EC,IAAI,KACpG,6BAVYC,EAUIZ,EAAMC,KAAKQ,QAAQ,GAAGI,aAT5BC,OAAO,GAAGC,cAAgBH,EAAOI,MAAM,IAUjD,4BAAKC,KAAKC,MAAMlB,EAAMC,KAAKkB,KAAKC,KAAK,GAArC,UACA,2BAAOC,KAAK,OAAOd,GAAG,SAASe,YAAY,eAAeC,SAAUvB,EAAMwB,eAC1E,6BACA,4BAAQjB,GAAG,cAAckB,QAASzB,EAAM0B,SAAxC,iBAGD,kBAAC5B,EAAD,OAjBP,IAAoBc,ECiCTe,MAlCf,WAEE,IAFa,EAGWC,mBAAS,IAHpB,mBAGN3B,EAHM,KAGA4B,EAHA,OAIeD,mBAAS,UAJxB,mBAINE,EAJM,KAIEC,EAJF,KAUb,SAASL,IACPM,MAAM,qDAAD,OAAsDF,EAAtD,kBATK,mCASL,kBACFG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACC,GACCL,EAAQK,MAEV,SAACE,GACCC,QAAQC,IAAI,UAAUF,MAS5B,OAJFG,qBAAU,WACRb,MACA,IAGE,yBAAKvB,UAAU,OACf,kBAACJ,EAAD,CAAYE,KAAMA,EAAMyB,QAASA,EAASF,aAvB9C,SAAsBgB,GACpBT,EAAUS,EAAEC,OAAOC,YCCHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLC,QAAQD,MAAMA,EAAMuB,c","file":"static/js/main.44d049a6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Error() {\r\n    return (\r\n        <div>\r\n            <h1>Check city name!</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Error from './Error'\r\n\r\nexport default function Conditions(props) {\r\n\r\n    function capitalize(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div >\r\n        {props.data.cod === 200 ? \r\n            <div className=\"conditions\">\r\n        <h1><i className=\"fas fa-map-marker-alt icon\"></i> {props.data.name}, {props.data.sys.country}</h1>\r\n        <img id=\"weatherIcon\" src={`http://openweathermap.org/img/wn/${props.data.weather[0].icon}@2x.png`} alt=\"\"/>\r\n            <h1>{capitalize(props.data.weather[0].description)}</h1>\r\n            <h1>{Math.round(props.data.main.temp,2)} Â°C</h1>\r\n            <input type=\"text\" id=\"cityID\" placeholder=\"City name...\" onChange={props.changeCityID}/>\r\n            <br/>\r\n            <button id=\"forecastBtn\" onClick={props.getData}>Get forecast</button>\r\n            </div>\r\n            : \r\n           <Error/>\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport Conditions from './components/Conditions'\n\nfunction App() {\n\n  const KEY = \"7ad51afce75ed1824cf04733a5016083\";\n  const [data, setData] = useState({});\n  const [cityID, setCityID] = useState(\"Krakow\");\n\n  function changeCityID(e){\n    setCityID(e.target.value)\n  }\n\n  function getData(){\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityID}&appid=${KEY}&units=metric`)\n      .then(res => res.json())\n      .then(\n        (res) => {\n          setData(res);\n        },\n        (error) => {\n          console.log(\"error: \"+error)\n        }\n      )\n  }\n\n  useEffect(() => {\n    getData()\n  },[])\n\n    return (\n      <div className=\"App\">\n      <Conditions data={data} getData={getData} changeCityID={changeCityID}/>\n    </div>\n    ); \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}